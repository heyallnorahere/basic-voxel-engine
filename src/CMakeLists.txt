cmake_minimum_required(VERSION 3.10)
file(GLOB_RECURSE CPP_SOURCE_FILES "${CMAKE_CURRENT_SOURCE_DIR}/lib/*.cpp")
file(GLOB_RECURSE INTERNAL_HEADER_FILES "${CMAKE_CURRENT_SOURCE_DIR}/lib/*.h")
file(GLOB_RECURSE H_HEADER_FILES "${CMAKE_CURRENT_SOURCE_DIR}/include/*.h")
set(MANIFEST ${CPP_SOURCE_FILES} ${INTERNAL_HEADER_FILES} ${H_HEADER_FILES})
set(BVE_TARGET_NAME basic-voxel-engine)
if(BVE_BUILD_EXECUTABLE)
    file(GLOB_RECURSE EXECUTABLE_SOURCE_FILES "${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp")
    file(GLOB_RECURSE EXECUTABLE_HEADER_FILES "${CMAKE_CURRENT_SOURCE_DIR}/src/*.h")
    add_executable(${BVE_TARGET_NAME} ${MANIFEST} ${EXECUTABLE_SOURCE_FILES} ${EXECUTABLE_HEADER_FILES})
else()
    add_library(${BVE_TARGET_NAME} STATIC ${MANIFEST})
endif()
set_target_properties(${BVE_TARGET_NAME} PROPERTIES CXX_STANDARD 17)
find_path(MONO_HEADERS "mono/jit/jit.h" HINTS "/usr/include" "C:\\Program Files\\Mono\\include" "/Library/Frameworks/Mono.framework/Versions/Current/include" PATH_SUFFIXES "mono-2.0")
if(NOT MONO_HEADERS)
    message(FATAL_ERROR "Could not find Mono headers!")
else()
    message(STATUS "Found Mono headers: ${MONO_HEADERS}")
endif()
target_include_directories(${BVE_TARGET_NAME} PUBLIC "${PROJECT_SOURCE_DIR}/vendor/glm" "${PROJECT_SOURCE_DIR}/vendor/stb" "${CMAKE_CURRENT_SOURCE_DIR}/include" ${MONO_HEADERS})
set(MONO_LIBRARY_HINTS "/usr/lib" "C:\\Program Files\\Mono\\lib" "/Library/Frameworks/Mono.framework/Versions/Current/lib")
find_library(MONO_LIBS NAMES monosgen-2.0 mono-2.0-sgen HINTS ${MONO_LIBRARY_HINTS})
if(NOT MONO_LIBS)
    message(FATAL_ERROR "Could not find Mono binaries!")
else()
    message(STATUS "Found Mono library: ${MONO_LIBS}")
endif()
target_link_libraries(${BVE_TARGET_NAME} PUBLIC glfw glad spdlog EnTT imgui assimp ${MONO_LIBS})
if(WIN32)
    find_file(MONO_DLL NAMES mono-2.0-sgen.dll HINTS "C:\\Program Files\\Mono\\bin")
    if(NOT MONO_DLL)
        message(FATAL_ERROR "Could not find Mono DLL!")
    else()
        message(STATUS "Found Mono DLL: ${MONO_DLL}")
    endif()
    add_custom_command(TARGET ${BVE_TARGET_NAME} POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy_if_different ${MONO_DLL} $<TARGET_FILE_DIR:${BVE_TARGET_NAME}>)
endif()
find_path(MONO_ASSEMBLIES "mono/4.5" HINTS ${MONO_LIBRARY_HINTS})
if(NOT MONO_ASSEMBLIES)
    message(FATAL_ERROR "Could not find Mono assemblies!")
else()
    message(STATUS "Found Mono assemblies: ${MONO_ASSEMBLIES}")
endif()
target_compile_definitions(${BVE_TARGET_NAME} PUBLIC "MONO_ASSEMBLIES=\"${MONO_ASSEMBLIES}\"" "BVE_TARGET_NAME=\"${BVE_TARGET_NAME}\"")
if(${CMAKE_VERSION} VERSION_GREATER_EQUAL 3.16)
    target_precompile_headers(${BVE_TARGET_NAME} PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/include/bve_pch.h")
endif()
if(WIN32)
    target_compile_definitions(${BVE_TARGET_NAME} PUBLIC BVE_PLATFORM_WINDOWS)
elseif(UNIX)
    target_compile_definitions(${BVE_TARGET_NAME} PUBLIC BVE_PLATFORM_UNIX)
    if(APPLE)
        target_compile_definitions(${BVE_TARGET_NAME} PUBLIC BVE_PLATFORM_MACOSX)
    endif()
endif()