cmake_minimum_required(VERSION 3.10)
file(GLOB_RECURSE CPP_SOURCE_FILES "${CMAKE_CURRENT_SOURCE_DIR}/lib/*.cpp")
file(GLOB_RECURSE INTERNAL_HEADER_FILES "${CMAKE_CURRENT_SOURCE_DIR}/lib/*.h")
file(GLOB_RECURSE H_HEADER_FILES "${CMAKE_CURRENT_SOURCE_DIR}/include/*.h")
set(MANIFEST ${CPP_SOURCE_FILES} ${INTERNAL_HEADER_FILES} ${H_HEADER_FILES})
set(BVE_INCLUDE_DIRS "${PROJECT_SOURCE_DIR}/vendor/glm" "${PROJECT_SOURCE_DIR}/vendor/stb" "${CMAKE_CURRENT_SOURCE_DIR}/include" ${mono_HEADERS} ${Vulkan_INCLUDE_DIR})
set(SPIRV_CROSS_LIBRARIES spirv-cross-core spirv-cross-glsl spirv-cross-hlsl)
set(GLSLANG_LIBRARIES glslang OSDependent OGLCompiler SPIRV HLSL glslang-default-resource-limits)
set(BVE_LIBRARIES glfw glad spdlog EnTT imgui assimp ${mono_LIBRARIES} ${Vulkan_LIBRARIES} ${GLSLANG_LIBRARIES} ${SPIRV_CROSS_LIBRARIES})
set(BVE_DEFINITIONS "MONO_ASSEMBLIES=\"${mono_ASSEMBLIES}\"" "BVE_TARGET_NAME=\"${BVE_TARGET_NAME}\"" "BVE_GRAPHICS_API=\"${BVE_GRAPHICS_API}\"")
if(WIN32)
    list(APPEND BVE_LIBRARIES DirectX-Headers)
    if(D3D12_FOUND)
        list(APPEND BVE_DEFINITIONS BVE_DX12_BACKEND_ENABLED)
        list(APPEND BVE_LIBRARIES ${D3D12_LIBRARIES})
        list(APPEND BVE_INCLUDE_DIRS ${D3D12_INCLUDE_DIRS})
    else()
        message(STATUS "Could not find D3D12 - DirectX 12 backend disabled")
        list(APPEND DISABLED_GRAPHICS_BACKENDS directx12)
    endif()
else()
    list(APPEND DISABLED_GRAPHICS_BACKENDS directx12)
endif()
foreach(BACKEND_NAME ${DISABLED_GRAPHICS_BACKENDS})
    set(BACKEND_PATH_STUB "${CMAKE_CURRENT_SOURCE_DIR}/lib/graphics/${BACKEND_NAME}")
    file(GLOB_RECURSE BACKEND_SOURCE "${BACKEND_PATH_STUB}/*.cpp" "${BACKEND_PATH_STUB}/*.h")
    list(REMOVE_ITEM MANIFEST ${BACKEND_SOURCE})
endforeach()
if(BVE_BUILD_EXECUTABLE)
    file(GLOB_RECURSE EXECUTABLE_SOURCE_FILES "${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp")
    file(GLOB_RECURSE EXECUTABLE_HEADER_FILES "${CMAKE_CURRENT_SOURCE_DIR}/src/*.h")
    add_executable(${BVE_TARGET_NAME} ${MANIFEST} ${EXECUTABLE_SOURCE_FILES} ${EXECUTABLE_HEADER_FILES})
else()
    add_library(${BVE_TARGET_NAME} STATIC ${MANIFEST})
endif()
if(${CMAKE_VERSION} VERSION_GREATER_EQUAL 3.16)
    target_precompile_headers(${BVE_TARGET_NAME} PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/include/bve_pch.h")
endif()
if(BVE_BUFFER_TRACE)
    list(APPEND BVE_DEFINITIONS BVE_BUFFER_TRACE)
endif()
if(WIN32)
    list(APPEND BVE_DEFINITIONS BVE_PLATFORM_WINDOWS)
    add_custom_command(TARGET ${BVE_TARGET_NAME} POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy_if_different ${mono_DLL} $<TARGET_FILE_DIR:${BVE_TARGET_NAME}>)
elseif(UNIX)
    list(APPEND BVE_DEFINITIONS BVE_PLATFORM_UNIX)
    if(APPLE)
        list(APPEND BVE_DEFINITIONS BVE_PLATFORM_MACOSX)
    else()
        list(APPEND BVE_DEFINITIONS BVE_PLATFORM_LINUX)
        list(APPEND BVE_LIBRARIES pthread stdc++fs)
    endif()
endif()
set_target_properties(${BVE_TARGET_NAME} PROPERTIES CXX_STANDARD 17 FOLDER BVE)
target_include_directories(${BVE_TARGET_NAME} PUBLIC ${BVE_INCLUDE_DIRS})
target_link_libraries(${BVE_TARGET_NAME} PUBLIC ${BVE_LIBRARIES})
target_compile_definitions(${BVE_TARGET_NAME} PUBLIC ${BVE_DEFINITIONS})